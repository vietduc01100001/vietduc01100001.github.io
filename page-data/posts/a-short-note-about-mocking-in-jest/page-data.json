{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/a-short-note-about-mocking-in-jest/","result":{"data":{"markdownRemark":{"id":"128bb08b-9687-5c62-82b6-cba622ef17f1","html":"<h2 id=\"the-situation\" style=\"position:relative;\"><a href=\"#the-situation\" aria-label=\"the situation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The situation</h2>\n<p>Suppose we have the following code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Storage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@google-cloud/storage'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Storage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">bucketName<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> storage<span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>bucketName<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> bucket<span class=\"token punctuation\">.</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token comment\">// this makes an API request and returns a Promise</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since we wouldn’t like our tests to hit the Cloud Storage API (that’s slow and sometimes flaky), we need to mock the <code class=\"language-text\">@google-cloud/storage</code> module. There are a few ways we can do that.</p>\n<h2 id=\"__mocks__-directory\" style=\"position:relative;\"><a href=\"#__mocks__-directory\" aria-label=\"__mocks__ directory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">__mocks__</code> directory</h2>\n<p>With this kind of mocking, we create a mock module inside the <code class=\"language-text\">__mocks__</code> directory. Where to create this directory depends on what kind of module we’re mocking. <code class=\"language-text\">@google-cloud/storage</code> is a scoped Node module so we need to create a directory structure like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;root_dir>/__mocks__/@google-cloud/storage.js</code></pre></div>\n<p>The <code class=\"language-text\">storage.js</code> file is our mock file. We replace the <code class=\"language-text\">Storage</code> class with our own implementation.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cloudStorage <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">createMockFromModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@google-cloud/storage'</span><span class=\"token punctuation\">)</span>\n\ncloudStorage<span class=\"token punctuation\">.</span>Storage <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bucketName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">file</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fakeFile <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fakeFile<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> bucket\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> cloudStorage</code></pre></div>\n<p>In our test files, we don’t need to explicitly call <code class=\"language-text\">jest.mock('@google-cloud/storage')</code>. The module is automatically mocked. This behavior can be turned off by using <a href=\"https://jestjs.io/docs/jest-object#jestunmockmodulename\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">jest.unmock()</code></a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getFile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./storage'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can return a file at a specific bucket'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call `getFile`</span>\n  <span class=\"token comment\">// test assertions</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, if we mock a user-written module or a built-in Node.js module, calling <code class=\"language-text\">jest.mock()</code> is required.</p>\n<h2 id=\"jestmocks-factory-function\" style=\"position:relative;\"><a href=\"#jestmocks-factory-function\" aria-label=\"jestmocks factory function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">jest.mock()</code>’s factory function</h2>\n<p><a href=\"https://jestjs.io/docs/jest-object#jestmockmodulename-factory-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">jest.mock()</code></a> has a second argument that accepts a factory function. When provided, Jest will replace the actual module with whatever this factory function returns.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mockedStorage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> fakeFile <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bucketName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">file</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>fakeFile<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> bucket\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can return a file at a specific bucket'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fakeFile <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@google-cloud/storage'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    Storage<span class=\"token operator\">:</span> <span class=\"token function\">mockedStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> fakeFile <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getFile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./storage'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// call `getFile`</span>\n  <span class=\"token comment\">// test assertions</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice that the <code class=\"language-text\">require</code> statement must be called after <code class=\"language-text\">jest.mock()</code>.</p>\n<p>This kind of mocking is intended to be used when we want to mock a module differently within the same file. By making the mock generating code into a separate function, different test cases can get different mocks that behave as expected with the given input.</p>\n<h2 id=\"a-small-tip-when-writing-mocks\" style=\"position:relative;\"><a href=\"#a-small-tip-when-writing-mocks\" aria-label=\"a small tip when writing mocks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A small tip when writing mocks</h2>\n<p>A mock module doesn’t have to implement everything the original module has. It should be as simple as possible — only contains the necessary parts to make the code that we’re testing run.</p>\n<p><em>References:</em></p>\n<ul>\n<li><a href=\"https://jestjs.io/docs/manual-mocks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>Manual Mocks · Jest</em></a></li>\n<li><a href=\"https://jestjs.io/docs/jest-object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>The Jest Object · Jest</em></a></li>\n</ul>","fields":{"slug":"/posts/a-short-note-about-mocking-in-jest/","seriesSlug":null,"tagSlugs":["/tag/jest/"]},"frontmatter":{"date":"2021-06-01T04:30:00.000Z","description":"2 ways to mock a Node.js module with Jest.","tags":["jest"],"title":"A short note about mocking in Jest","series":null,"socialImage":{"publicURL":"/static/44932cd5705d99683cbeb752cb6b3341/thumb.png"}}}},"pageContext":{"slug":"/posts/a-short-note-about-mocking-in-jest/"}},"staticQueryHashes":["251939775","2803610385","323858932"]}