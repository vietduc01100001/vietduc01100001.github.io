{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/ruby-010/","result":{"data":{"markdownRemark":{"id":"9af63d16-4152-55c3-a918-c466b6c718df","html":"<h2 id=\"1--vs-\" style=\"position:relative;\"><a href=\"#1--vs-\" aria-label=\"1  vs  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <code class=\"language-text\">&quot;</code> vs <code class=\"language-text\">&#39;</code></h2>\n<p>Use double quotes if you want to do:</p>\n<ul>\n<li>String interpolation.</li>\n<li>Using escape sequences.</li>\n</ul>\n<h2 id=\"2-back-tick-\" style=\"position:relative;\"><a href=\"#2-back-tick-\" aria-label=\"2 back tick  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Back-tick (<code class=\"language-text\">`</code>)</h2>\n<p>A special use of back-ticks is with the <code class=\"language-text\">puts</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">puts `ls`</code></pre></div>\n<p>will send the string <code class=\"language-text\">ls</code> as a command to the operating system, which in this case I believe you certainly know what the command does (unless you’re from Windows).</p>\n<h2 id=\"3-stringeql-vs-stringequal\" style=\"position:relative;\"><a href=\"#3-stringeql-vs-stringequal\" aria-label=\"3 stringeql vs stringequal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <code class=\"language-text\">String.eql?</code> vs <code class=\"language-text\">String.equal?</code></h2>\n<p><code class=\"language-text\">String.eql?</code> acts like the double equals operator (<code class=\"language-text\">==</code>), checks if two strings are identical.</p>\n<p><code class=\"language-text\">String.equal?</code> checks whether two strings are the same object.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">a <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\nc <span class=\"token operator\">=</span> b\n\nputs a<span class=\"token punctuation\">.</span>eql<span class=\"token operator\">?</span> b <span class=\"token comment\"># prints \"true\"</span>\nputs a<span class=\"token punctuation\">.</span>equal<span class=\"token operator\">?</span> b <span class=\"token comment\"># prints \"false\"</span>\nputs b<span class=\"token punctuation\">.</span>equal<span class=\"token operator\">?</span> c <span class=\"token comment\"># prints \"true\"</span></code></pre></div>\n<h2 id=\"4--vs-and--vs-or--vs-not\" style=\"position:relative;\"><a href=\"#4--vs-and--vs-or--vs-not\" aria-label=\"4  vs and  vs or  vs not permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <code class=\"language-text\">&amp;&amp;</code> vs <code class=\"language-text\">and</code>, <code class=\"language-text\">||</code> vs <code class=\"language-text\">or</code>, <code class=\"language-text\">!</code> vs <code class=\"language-text\">not</code></h2>\n<p>They are not the same. They differ in precedence. The character operators (<code class=\"language-text\">&amp;&amp;</code>, <code class=\"language-text\">||</code>, and <code class=\"language-text\">!</code>) have higher precedence than the word operators (<code class=\"language-text\">and</code>, <code class=\"language-text\">or</code>, and <code class=\"language-text\">not</code>).</p>\n<h2 id=\"5-code-blocks\" style=\"position:relative;\"><a href=\"#5-code-blocks\" aria-label=\"5 code blocks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Code blocks</h2>\n<p>Duck: <em>“Hey, JavaScript developers! Take a look at this.”</em></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  puts <span class=\"token string\">\"Hi there!\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JS devs: <em>“What is this? Is this a function declaration?”</em></p>\n<p>Duck: <em>“Nah… Don’t be <strong>foo</strong>led! It’s a function (or more correctly, method) invocation. The braces are a code block that’s passed to the method <code class=\"language-text\">foo</code>. Think of it as a callback function in JavaScript. The <code class=\"language-text\">foo</code> method can execute the code block whenever it wants by using the keyword <code class=\"language-text\">yield</code>.”</em></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">foo</span></span>\n  puts <span class=\"token string\">\"I am a function, foo!\"</span>\n  <span class=\"token keyword\">yield</span>\n<span class=\"token keyword\">end</span>\n\nfoo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  puts <span class=\"token string\">\"Hi there!\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Output is:</span>\n<span class=\"token comment\"># I am a function, foo!</span>\n<span class=\"token comment\"># Hi there!</span></code></pre></div>\n<p><em>Code blocks also have another syntax: <code class=\"language-text\">do ... end</code>.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n  puts <span class=\"token string\">\"Hi there!\"</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<h2 id=\"6-multiple-return-values\" style=\"position:relative;\"><a href=\"#6-multiple-return-values\" aria-label=\"6 multiple return values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Multiple return values</h2>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">calc</span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> n\n<span class=\"token keyword\">end</span>\n\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\nputs <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>a<span class=\"token delimiter tag\">}</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>b<span class=\"token delimiter tag\">}</span></span>, <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>c<span class=\"token delimiter tag\">}</span></span>\"</span> <span class=\"token comment\"># prints \"5, 10, 15\"</span></code></pre></div>\n<p>Ruby can return multiple values from a method, much like Go. However, it’s not a native feature.</p>\n<p>You have to explicitly use the <code class=\"language-text\">return</code> keyword for it to work. Under the hood, Ruby actually wraps the return values in an array and return it. On the left side of the assignment, we use a syntax called <em>parallel assignment</em> that extracts the corresponding values from the returned array and assign them to each variable.</p>\n<h2 id=\"7-checking-if-a-value-falls-within-a-range\" style=\"position:relative;\"><a href=\"#7-checking-if-a-value-falls-within-a-range\" aria-label=\"7 checking if a value falls within a range permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Checking if a value falls within a range</h2>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">is_two_digit_number</span></span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token number\">10.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.99</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> n\n<span class=\"token keyword\">end</span>\n\nputs is_two_digit_number<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># prints \"false\"</span>\nputs is_two_digit_number<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># prints \"true\"</span></code></pre></div>\n<p>Ranges in Ruby can be created using the <code class=\"language-text\">..</code> and <code class=\"language-text\">...</code> operators.</p>\n<ul>\n<li><code class=\"language-text\">..</code> creates an inclusive range. In math: <code class=\"language-text\">[low, high]</code></li>\n<li><code class=\"language-text\">...</code> creates an exclusive range. In math: <code class=\"language-text\">[low, high)</code></li>\n</ul>\n<p>The triple equals operator (<code class=\"language-text\">===</code>) is used to check whether a value is within a range.</p>","fields":{"slug":"/posts/ruby-010/","seriesSlug":"/series/today-i-learned/","tagSlugs":["/tag/ruby/"]},"frontmatter":{"date":"2021-06-17T04:30:00.000Z","description":"Not 101. This doens't have everything you need to know about Ruby. Just something I learned.","tags":["ruby"],"title":"Ruby 010","series":"Today I learned","socialImage":{"publicURL":"/static/6079f707ae0e007652080c19250dd147/thumb.png"}}}},"pageContext":{"slug":"/posts/ruby-010/"}},"staticQueryHashes":["251939775","2803610385","323858932"]}