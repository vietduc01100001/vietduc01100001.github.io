{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/esmoduleinterop/","result":{"data":{"markdownRemark":{"id":"66c67f0d-4b23-57ef-9177-bf1754db2cad","html":"<h2 id=\"the-problem\" style=\"position:relative;\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The problem</h2>\n<p>So I was working on a TypeScript codebase where I needed to create a new package. As lazy as I could, I copy-pasted some files from another similar package. Everything was all smooth sailing until I ran the tests. Boom!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">axios_retry_1.default is not a function</code></pre></div>\n<p>Noob-to-TS me asked: <em>“OK, why is it calling <code class=\"language-text\">default</code>?”</em></p>\n<p>A quick Google search told me that when TypeScript transpiles the code to JavaScript, a default export assigns the exported variable to the <code class=\"language-text\">default</code> property of <code class=\"language-text\">module.exports</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Foo\n<span class=\"token comment\">// becomes</span>\nexports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> Foo</code></pre></div>\n<p>Therefore, when we do a default import like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> axiosRetry <span class=\"token keyword\">from</span> <span class=\"token string\">'axios-retry'</span></code></pre></div>\n<p>We actually expect the <code class=\"language-text\">default</code> property to be callable. But <code class=\"language-text\">axios-retry</code> is written in plain JavaScript. It doesn’t export default.</p>\n<p>Well, that’s not a big problem. I imported modules written in CommonJS to TypeScript before. A star import would always work.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> axiosRetry <span class=\"token keyword\">from</span> <span class=\"token string\">'axios-retry'</span></code></pre></div>\n<p>But this time, I was thinking if there was a better way to do this. I hate extra meaningless keystrokes in my code. And that’s how I stumbled across <code class=\"language-text\">esModuleInterop</code>.</p>\n<h2 id=\"what-is-esmoduleinterop\" style=\"position:relative;\"><a href=\"#what-is-esmoduleinterop\" aria-label=\"what is esmoduleinterop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is <code class=\"language-text\">esModuleInterop</code>?</h2>\n<p>It’s an option in <code class=\"language-text\">tsconfig.json</code> that allows importing CommonJS modules in compliance with the ES6 spec. But what does the spec says? It says: <em>a star import can only be a plain object, not callable</em>. In this case, <code class=\"language-text\">axiosRetry</code> is not an object. It’s a function I actually want to call. So the star import here isn’t compliant with the spec.</p>\n<p>By setting <code class=\"language-text\">esModuleInterop</code> to <code class=\"language-text\">true</code>, I can import <code class=\"language-text\">axios-retry</code> by the default import syntax and also get rid of the error I met earlier. Nice and clean!</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> axiosRetry <span class=\"token keyword\">from</span> <span class=\"token string\">'axios-retry'</span> <span class=\"token comment\">// spec compliant</span>\n\n<span class=\"token function\">axiosRetry</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span> <span class=\"token comment\">// can call it too!</span></code></pre></div>\n<p>If I try calling <code class=\"language-text\">axiosRetry</code> when it’s star imported, I’ll get a compile-time error.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> axiosRetry <span class=\"token keyword\">from</span> <span class=\"token string\">'axios-retry'</span>\n\n<span class=\"token function\">axiosRetry</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> This expression is not callable.</span></code></pre></div>\n<h2 id=\"optional-how-does-it-work\" style=\"position:relative;\"><a href=\"#optional-how-does-it-work\" aria-label=\"optional how does it work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(Optional) How does it work?</h2>\n<p>When enabling <code class=\"language-text\">esModuleInterop</code>, modules are not imported directly but instead through a helper function <code class=\"language-text\">__importDefault</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> axios_retry_1 <span class=\"token operator\">=</span> <span class=\"token function\">__importDefault</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios-retry'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">__importDefault</code> function looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> __importDefault <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>__importDefault<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">mod</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mod <span class=\"token operator\">&amp;&amp;</span> mod<span class=\"token punctuation\">.</span>__esModule<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> mod <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"default\"</span><span class=\"token operator\">:</span> mod <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, if the imported module is not an ES6 module (checked via the <code class=\"language-text\">__esModule</code> property), this function assigns the module to the <code class=\"language-text\">default</code> property and returns it. Otherwise, it returns an untouched module.</p>","fields":{"slug":"/posts/esmoduleinterop/","seriesSlug":"/series/today-i-learned/","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2021-04-26T04:30:00.000Z","description":"What I learned about the esModuleInterop option in TypeScript.","tags":["typescript"],"title":"esModuleInterop","series":"Today I learned","socialImage":{"publicURL":"/static/4ba9a6db68ab62a8b67eb8770e324177/thumb.png"}}}},"pageContext":{"slug":"/posts/esmoduleinterop/"}},"staticQueryHashes":["251939775","2803610385","323858932"]}