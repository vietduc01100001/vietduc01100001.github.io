{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/exponential-backoff/","result":{"data":{"markdownRemark":{"id":"b2cc11b5-867f-5bf6-8972-e8f67c27880d","html":"<h2 id=\"what-is-exponential-backoff\" style=\"position:relative;\"><a href=\"#what-is-exponential-backoff\" aria-label=\"what is exponential backoff permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is exponential backoff?</h2>\n<p>Exponential backoff is an algorithm often used in network applications for error handling. It’s a strategy where a client periodically retries a failed request with increasing delays between requests. The best way to understand this algorithm is to look at an example:</p>\n<ol>\n<li>A client makes a request to a server.</li>\n<li>If the request fails, wait <code class=\"language-text\">1 + random</code> seconds and retry.</li>\n<li>If the request fails, wait <code class=\"language-text\">2 + random</code> seconds and retry.</li>\n<li>If the request fails, wait <code class=\"language-text\">4 + random</code> seconds and retry.</li>\n<li>If the request fails, wait <code class=\"language-text\">8 + random</code> seconds and retry.</li>\n<li>And so on, up to a <code class=\"language-text\">maximum backoff</code> time.</li>\n<li>Continue to retry up to a maximum number of retries, but not increasing the delay.</li>\n</ol>\n<p>As you can see, the delay between each request grows exponentially plus a <code class=\"language-text\">random</code> number. But what is that number? It’s called <em>jitter</em>, usually much smaller than the main delay (in milliseconds). The reason it’s random is to avoid retried requests hitting the server at the same time.</p>\n<h2 id=\"how-can-i-implement-it\" style=\"position:relative;\"><a href=\"#how-can-i-implement-it\" aria-label=\"how can i implement it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How can I implement it?</h2>\n<p>It’s fairly simple to implement exponential backoff. You can work it out yourself by looking at the example.</p>\n<p>Here is the formula to calculate the delay on each request.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">delay = min(((2^retry_count) + small_random_number), maximum_backoff)</code></pre></div>\n<p>Where:</p>\n<ul>\n<li><code class=\"language-text\">retry_count</code> increments by 1 for each request.</li>\n<li><code class=\"language-text\">small_random_number</code> is random for each request (you can choose somewhere between 0-20% of <code class=\"language-text\">2^retry_count</code>).</li>\n<li><code class=\"language-text\">maximum_backoff</code> is the maximum delay.</li>\n</ul>\n<h2 id=\"why-should-i-use-it\" style=\"position:relative;\"><a href=\"#why-should-i-use-it\" aria-label=\"why should i use it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why should I use it?</h2>\n<p>Exponential backoff spaces out retries, reduces burst requests coming to the servers, which leads to more reliable error handling.</p>\n<p><em>References:</em></p>\n<ul>\n<li><em><a href=\"https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Exponential Backoff And Jitter | AWS Architecture Blog</a></em></li>\n<li><em><a href=\"https://cloud.google.com/iot/docs/how-tos/exponential-backoff\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Implementing exponential backoff  |  Cloud IoT Core Documentation</a></em></li>\n</ul>","fields":{"slug":"/posts/exponential-backoff/","categorySlug":"/category/today-i-learned/","tagSlugs":["/tag/algorithm/"]},"frontmatter":{"date":"2021-04-29T04:30:00.000Z","description":"What I learned about exponential backoff.","tags":["algorithm"],"title":"Exponential backoff","category":"Today I learned","socialImage":{"publicURL":"/static/01ee7396a1443fd44528dbf28ab913b2/thumb.png"}}}},"pageContext":{"slug":"/posts/exponential-backoff/"}},"staticQueryHashes":["251939775","2803610385","401334301"]}